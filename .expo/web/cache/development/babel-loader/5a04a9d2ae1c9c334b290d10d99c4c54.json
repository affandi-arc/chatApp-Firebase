{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, createContext, useContext, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from \"./config/firebase\";\nimport Login from \"./screens/Login\";\nimport Signup from \"./screens/Signup\";\nimport Chat from \"./screens/Chat\";\nimport Home from \"./screens/Home\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar AuthenticatedUserContext = createContext({});\nvar AuthenticatedUserProvider = function AuthenticatedUserProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  return _jsx(AuthenticatedUserContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    children: children\n  });\n};\nfunction ChatStack() {\n  return _jsxs(Stack.Navigator, {\n    defaultScreenOptions: Home,\n    children: [_jsx(Stack.Screen, {\n      name: \"Home\",\n      component: Home\n    }), _jsx(Stack.Screen, {\n      name: \"Chat\",\n      component: Chat\n    })]\n  });\n}\nfunction AuthStack() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Login\",\n      component: Login\n    }), _jsx(Stack.Screen, {\n      name: \"Signup\",\n      component: Signup\n    })]\n  });\n}\nfunction RootNavigator() {\n  var _useContext = useContext(AuthenticatedUserContext),\n    user = _useContext.user,\n    setUser = _useContext.setUser;\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  useEffect(function () {\n    var unsubscribeAuth = onAuthStateChanged(auth, function _callee(authenticatedUser) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              authenticatedUser ? setUser(authenticatedUser) : setUser(null);\n              setIsLoading(false);\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    return unsubscribeAuth;\n  }, [user]);\n  if (isLoading) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: user ? _jsx(ChatStack, {}) : _jsx(AuthStack, {})\n  });\n}\nexport default function App() {\n  return _jsx(AuthenticatedUserProvider, {\n    children: _jsx(RootNavigator, {})\n  });\n}","map":{"version":3,"names":["React","useState","createContext","useContext","useEffect","NavigationContainer","createStackNavigator","onAuthStateChanged","auth","Login","Signup","Chat","Home","Stack","AuthenticatedUserContext","AuthenticatedUserProvider","children","user","setUser","ChatStack","AuthStack","headerShown","RootNavigator","isLoading","setIsLoading","unsubscribeAuth","authenticatedUser","flex","justifyContent","alignItems","App"],"sources":["/home/affandi/ChatApp/App.js"],"sourcesContent":["import React, { useState, createContext, useContext, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { View, ActivityIndicator } from 'react-native';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { auth } from './config/firebase';\nimport Login from './screens/Login';\nimport Signup from './screens/Signup';\nimport Chat from './screens/Chat';\nimport Home from './screens/Home';\n\nconst Stack = createStackNavigator();\nconst AuthenticatedUserContext = createContext({});\n\nconst AuthenticatedUserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\nreturn (\n    <AuthenticatedUserContext.Provider value={{ user, setUser }}>\n      {children}\n    </AuthenticatedUserContext.Provider>\n  );\n};\n\nfunction ChatStack() {\n  return (\n    <Stack.Navigator defaultScreenOptions={Home}>\n      <Stack.Screen name='Home' component={Home} />\n      <Stack.Screen name='Chat' component={Chat} />\n    </Stack.Navigator>\n  );\n}\n\nfunction AuthStack() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name='Login' component={Login} />\n      <Stack.Screen name='Signup' component={Signup} />\n    </Stack.Navigator>\n  );\n}\n\nfunction RootNavigator() {\n  const { user, setUser } = useContext(AuthenticatedUserContext);\n  const [isLoading, setIsLoading] = useState(true);\nuseEffect(() => {\n    // onAuthStateChanged returns an unsubscriber\n    const unsubscribeAuth = onAuthStateChanged(\n      auth,\n      async authenticatedUser => {\n        authenticatedUser ? setUser(authenticatedUser) : setUser(null);\n        setIsLoading(false);\n      }\n    );\n// unsubscribe auth listener on unmount\n    return unsubscribeAuth;\n  }, [user]);\nif (isLoading) {\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <ActivityIndicator size='large' />\n      </View>\n    );\n  }\n\nreturn (\n    <NavigationContainer>\n      {user ? <ChatStack /> : <AuthStack />}\n    </NavigationContainer>\n  );\n}\n\nexport default function App() {\n  return (\n    <AuthenticatedUserProvider>\n      <RootNavigator />\n    </AuthenticatedUserProvider>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,aAAa,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAAC;AAAA;AAE/D,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI;AACb,OAAOC,KAAK;AACZ,OAAOC,MAAM;AACb,OAAOC,IAAI;AACX,OAAOC,IAAI;AAAuB;AAAA;AAElC,IAAMC,KAAK,GAAGP,oBAAoB,EAAE;AACpC,IAAMQ,wBAAwB,GAAGZ,aAAa,CAAC,CAAC,CAAC,CAAC;AAElD,IAAMa,yBAAyB,GAAG,SAA5BA,yBAAyB,OAAqB;EAAA,IAAfC,QAAQ,QAARA,QAAQ;EAC3C,gBAAwBf,QAAQ,CAAC,IAAI,CAAC;IAAA;IAA/BgB,IAAI;IAAEC,OAAO;EACtB,OACI,KAAC,wBAAwB,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAED,IAAI,EAAJA,IAAI;MAAEC,OAAO,EAAPA;IAAQ,CAAE;IAAA,UACzDF;EAAQ,EACyB;AAExC,CAAC;AAED,SAASG,SAAS,GAAG;EACnB,OACE,MAAC,KAAK,CAAC,SAAS;IAAC,oBAAoB,EAAEP,IAAK;IAAA,WAC1C,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,MAAM;MAAC,SAAS,EAAEA;IAAK,EAAG,EAC7C,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,MAAM;MAAC,SAAS,EAAED;IAAK,EAAG;EAAA,EAC7B;AAEtB;AAEA,SAASS,SAAS,GAAG;EACnB,OACE,MAAC,KAAK,CAAC,SAAS;IAAC,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAM,CAAE;IAAA,WACrD,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,OAAO;MAAC,SAAS,EAAEZ;IAAM,EAAG,EAC/C,KAAC,KAAK,CAAC,MAAM;MAAC,IAAI,EAAC,QAAQ;MAAC,SAAS,EAAEC;IAAO,EAAG;EAAA,EACjC;AAEtB;AAEA,SAASY,aAAa,GAAG;EACvB,kBAA0BnB,UAAU,CAACW,wBAAwB,CAAC;IAAtDG,IAAI,eAAJA,IAAI;IAAEC,OAAO,eAAPA,OAAO;EACrB,iBAAkCjB,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAzCsB,SAAS;IAAEC,YAAY;EAChCpB,SAAS,CAAC,YAAM;IAEZ,IAAMqB,eAAe,GAAGlB,kBAAkB,CACxCC,IAAI,EACJ,iBAAMkB,iBAAiB;MAAA;QAAA;UAAA;YAAA;cACrBA,iBAAiB,GAAGR,OAAO,CAACQ,iBAAiB,CAAC,GAAGR,OAAO,CAAC,IAAI,CAAC;cAC9DM,YAAY,CAAC,KAAK,CAAC;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACrB,CACF;IAED,OAAOC,eAAe;EACxB,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EACZ,IAAIM,SAAS,EAAE;IACX,OACE,KAAC,IAAI;MAAC,KAAK,EAAE;QAAEI,IAAI,EAAE,CAAC;QAAEC,cAAc,EAAE,QAAQ;QAAEC,UAAU,EAAE;MAAS,CAAE;MAAA,UACvE,KAAC,iBAAiB;QAAC,IAAI,EAAC;MAAO;IAAG,EAC7B;EAEX;EAEF,OACI,KAAC,mBAAmB;IAAA,UACjBZ,IAAI,GAAG,KAAC,SAAS,KAAG,GAAG,KAAC,SAAS;EAAG,EACjB;AAE1B;AAEA,eAAe,SAASa,GAAG,GAAG;EAC5B,OACE,KAAC,yBAAyB;IAAA,UACxB,KAAC,aAAa;EAAG,EACS;AAEhC"},"metadata":{},"sourceType":"module"}